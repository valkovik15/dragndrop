import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class MyForm extends JFrame {

    private JButton MyButton;
    private JPanel MyPanel;
    private JLabel StatusBar;
    private int x, y;
    private boolean isTransfer;

    public MyForm() {
        MyPanel.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                super.mouseMoved(e);
                StatusBar.setText(e.getX() + " " + e.getY());
            }
        });

        MyPanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                super.mousePressed(e);
                ButtonModel m = MyButton.getModel();
                m.setPressed(true);
            }
        });
        KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(new KeyEventDispatcher() {
            @Override
            public boolean dispatchKeyEvent(KeyEvent keyEvent) {
                isTransfer = keyEvent.isControlDown();
                if (keyEvent.getID() == KeyEvent.KEY_TYPED) {

                    if (Character.getNumericValue(keyEvent.getKeyChar()) > -1)
                        MyButton.setText(MyButton.getText() + keyEvent.getKeyChar());
                }
                if (keyEvent.getID() == KeyEvent.KEY_PRESSED) {
                    if (keyEvent.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
                        String str = new String(MyButton.getText());
                        if (str.length() > 0)
                            str = str.substring(0, str.length() - 1);
                        MyButton.setText(str);
                    }
                    if ((keyEvent.getKeyChar() >= 'А' & keyEvent.getKeyChar() <= 'я') || keyEvent.getKeyChar() == ' ') {
                        MyButton.setText(MyButton.getText() + keyEvent.getKeyChar());
                    }
                }
                return false;
            }
        });
        MyPanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                super.mouseReleased(e);
                ButtonModel m = MyButton.getModel();
                m.setPressed(false);
            }
        });
        MyPanel.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                super.mouseDragged(e);
                StatusBar.setText(e.getX() + " " + e.getY());

            }
        });
        MyButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                super.mousePressed(e);
                x = e.getX();
                y = e.getY();
                StatusBar.setText((MyButton.getX() + x) + " " + (MyButton.getY() + y));
            }
        });

        MyButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                super.mouseReleased(e);
                if (isTransfer == true) {
                    MyPanel.setLayout(null);
                    StatusBar.setSize(100, 10);
                    MyButton.setLocation(MyButton.getX() + e.getX() - x, MyButton.getY() + e.getY() - y);
                    StatusBar.setText((MyButton.getX() + x) + " " + (MyButton.getY() + y));
                }

            }
        });
        MyButton.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                super.mouseDragged(e);
                StatusBar.setText((e.getX() + MyButton.getX()) + " " + (MyButton.getY() + e.getY()));
            }
        });
        MyPanel.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                super.componentResized(e);
                StatusBar.setLocation(StatusBar.getX(), MyPanel.getHeight() - 40);
                pack();
            }
        });

    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("MyForm");
        frame.setPreferredSize(new Dimension(500, 500));
        frame.setContentPane(new MyForm().MyPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.pack();
        frame.setVisible(true);
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        MyPanel = new JPanel();
        MyPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        MyButton = new JButton();
        MyButton.setLabel("Нажми на меня!");
        MyButton.setText("Нажми на меня!");
        MyPanel.add(MyButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        StatusBar = new JLabel();
        StatusBar.setText("Координаты положения мыши");
        MyPanel.add(StatusBar, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MyPanel;
    }
}
